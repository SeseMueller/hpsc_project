<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="120333"><g><title>hpsc_project`&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (48 samples, 0.04%)</title><rect x="0.0075%" y="181" width="0.0399%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="48"/><text x="0.2575%" y="191.50"></text></g><g><title>hpsc_project`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (48 samples, 0.04%)</title><rect x="0.0075%" y="165" width="0.0399%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="48"/><text x="0.2575%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`write (47 samples, 0.04%)</title><rect x="0.0083%" y="149" width="0.0391%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="47"/><text x="0.2583%" y="159.50"></text></g><g><title>hpsc_project`DYLD-STUB$$calloc (274 samples, 0.23%)</title><rect x="0.0474%" y="181" width="0.2277%" height="15" fill="rgb(248,212,6)" fg:x="57" fg:w="274"/><text x="0.2974%" y="191.50"></text></g><g><title>hpsc_project`DYLD-STUB$$free (201 samples, 0.17%)</title><rect x="0.2751%" y="181" width="0.1670%" height="15" fill="rgb(208,68,35)" fg:x="331" fg:w="201"/><text x="0.5251%" y="191.50"></text></g><g><title>hpsc_project`__rdl_alloc_zeroed (164 samples, 0.14%)</title><rect x="0.4496%" y="181" width="0.1363%" height="15" fill="rgb(232,128,0)" fg:x="541" fg:w="164"/><text x="0.6996%" y="191.50"></text></g><g><title>hpsc_project`hpsc_project::force::apply_lj_force_arrays (43,536 samples, 36.18%)</title><rect x="0.6249%" y="181" width="36.1796%" height="15" fill="rgb(207,160,47)" fg:x="752" fg:w="43536"/><text x="0.8749%" y="191.50">hpsc_project`hpsc_project::force::apply_lj_force_arrays</text></g><g><title>hpsc_project`hpsc_project::force::apply_lj_force_linked_cell (16,208 samples, 13.47%)</title><rect x="36.8045%" y="181" width="13.4693%" height="15" fill="rgb(228,23,34)" fg:x="44288" fg:w="16208"/><text x="37.0545%" y="191.50">hpsc_project`hpsc_pr..</text></g><g><title>hpsc_project`hpsc_project::force::apply_lj_force_soa_dyn (2,823 samples, 2.35%)</title><rect x="47.9278%" y="165" width="2.3460%" height="15" fill="rgb(218,30,26)" fg:x="57673" fg:w="2823"/><text x="48.1778%" y="175.50">h..</text></g><g><title>hpsc_project`hpsc_project::integrator::VelocitySt$uf6$rmerVerlet$LT$T$GT$::update_position_linked (7,906 samples, 6.57%)</title><rect x="50.2738%" y="181" width="6.5701%" height="15" fill="rgb(220,122,19)" fg:x="60496" fg:w="7906"/><text x="50.5238%" y="191.50">hpsc_proj..</text></g><g><title>hpsc_project`hpsc_project::integrator::VelocitySt$uf6$rmerVerlet$LT$T$GT$::update_velocity_linked (7,667 samples, 6.37%)</title><rect x="56.8439%" y="181" width="6.3715%" height="15" fill="rgb(250,228,42)" fg:x="68402" fg:w="7667"/><text x="57.0939%" y="191.50">hpsc_pro..</text></g><g><title>hpsc_project`hpsc_project::linkedcell::LinkedCell&lt;T,_,_,_&gt;::apply_boundaries (10,062 samples, 8.36%)</title><rect x="63.2204%" y="181" width="8.3618%" height="15" fill="rgb(240,193,28)" fg:x="76075" fg:w="10062"/><text x="63.4704%" y="191.50">hpsc_project..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (232 samples, 0.19%)</title><rect x="74.1251%" y="165" width="0.1928%" height="15" fill="rgb(216,20,37)" fg:x="89197" fg:w="232"/><text x="74.3751%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2,227 samples, 1.85%)</title><rect x="74.3179%" y="165" width="1.8507%" height="15" fill="rgb(206,188,39)" fg:x="89429" fg:w="2227"/><text x="74.5679%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (2,563 samples, 2.13%)</title><rect x="76.1695%" y="165" width="2.1299%" height="15" fill="rgb(217,207,13)" fg:x="91657" fg:w="2563"/><text x="76.4195%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (625 samples, 0.52%)</title><rect x="77.7800%" y="149" width="0.5194%" height="15" fill="rgb(231,73,38)" fg:x="93595" fg:w="625"/><text x="78.0300%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (597 samples, 0.50%)</title><rect x="77.8033%" y="133" width="0.4961%" height="15" fill="rgb(225,20,46)" fg:x="93623" fg:w="597"/><text x="78.0533%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (34 samples, 0.03%)</title><rect x="78.2994%" y="165" width="0.0283%" height="15" fill="rgb(210,31,41)" fg:x="94220" fg:w="34"/><text x="78.5494%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (34 samples, 0.03%)</title><rect x="78.2994%" y="149" width="0.0283%" height="15" fill="rgb(221,200,47)" fg:x="94220" fg:w="34"/><text x="78.5494%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (33 samples, 0.03%)</title><rect x="78.3002%" y="133" width="0.0274%" height="15" fill="rgb(226,26,5)" fg:x="94221" fg:w="33"/><text x="78.5502%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (40 samples, 0.03%)</title><rect x="78.3276%" y="165" width="0.0332%" height="15" fill="rgb(249,33,26)" fg:x="94254" fg:w="40"/><text x="78.5776%" y="175.50"></text></g><g><title>hpsc_project`hpsc_project::linkedcell::LinkedCell&lt;T,_,_,_&gt;::flush_forces (8,489 samples, 7.05%)</title><rect x="71.5822%" y="181" width="7.0546%" height="15" fill="rgb(235,183,28)" fg:x="86137" fg:w="8489"/><text x="71.8322%" y="191.50">hpsc_proj..</text></g><g><title>libsystem_platform.dylib`_platform_memset (332 samples, 0.28%)</title><rect x="78.3609%" y="165" width="0.2759%" height="15" fill="rgb(221,5,38)" fg:x="94294" fg:w="332"/><text x="78.6109%" y="175.50"></text></g><g><title>hpsc_project`alloc::raw_vec::finish_grow (46 samples, 0.04%)</title><rect x="94.7155%" y="149" width="0.0382%" height="15" fill="rgb(247,18,42)" fg:x="113974" fg:w="46"/><text x="94.9655%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (36 samples, 0.03%)</title><rect x="94.7238%" y="133" width="0.0299%" height="15" fill="rgb(241,131,45)" fg:x="113984" fg:w="36"/><text x="94.9738%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (19 samples, 0.02%)</title><rect x="94.7379%" y="117" width="0.0158%" height="15" fill="rgb(249,31,29)" fg:x="114001" fg:w="19"/><text x="94.9879%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (19 samples, 0.02%)</title><rect x="94.7379%" y="101" width="0.0158%" height="15" fill="rgb(225,111,53)" fg:x="114001" fg:w="19"/><text x="94.9879%" y="111.50"></text></g><g><title>hpsc_project`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (74 samples, 0.06%)</title><rect x="94.7039%" y="165" width="0.0615%" height="15" fill="rgb(238,160,17)" fg:x="113960" fg:w="74"/><text x="94.9539%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.01%)</title><rect x="94.7537%" y="149" width="0.0116%" height="15" fill="rgb(214,148,48)" fg:x="114020" fg:w="14"/><text x="95.0037%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (41 samples, 0.03%)</title><rect x="94.7986%" y="85" width="0.0341%" height="15" fill="rgb(232,36,49)" fg:x="114074" fg:w="41"/><text x="95.0486%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (20 samples, 0.02%)</title><rect x="94.8161%" y="69" width="0.0166%" height="15" fill="rgb(209,103,24)" fg:x="114095" fg:w="20"/><text x="95.0661%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (20 samples, 0.02%)</title><rect x="94.8161%" y="53" width="0.0166%" height="15" fill="rgb(229,88,8)" fg:x="114095" fg:w="20"/><text x="95.0661%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (53 samples, 0.04%)</title><rect x="94.7895%" y="101" width="0.0440%" height="15" fill="rgb(213,181,19)" fg:x="114063" fg:w="53"/><text x="95.0395%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (73 samples, 0.06%)</title><rect x="94.7787%" y="117" width="0.0607%" height="15" fill="rgb(254,191,54)" fg:x="114050" fg:w="73"/><text x="95.0287%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (80 samples, 0.07%)</title><rect x="94.7745%" y="133" width="0.0665%" height="15" fill="rgb(241,83,37)" fg:x="114045" fg:w="80"/><text x="95.0245%" y="143.50"></text></g><g><title>hpsc_project`alloc::raw_vec::finish_grow (106 samples, 0.09%)</title><rect x="94.7712%" y="149" width="0.0881%" height="15" fill="rgb(233,36,39)" fg:x="114041" fg:w="106"/><text x="95.0212%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (18 samples, 0.01%)</title><rect x="94.8443%" y="133" width="0.0150%" height="15" fill="rgb(226,3,54)" fg:x="114129" fg:w="18"/><text x="95.0943%" y="143.50"></text></g><g><title>hpsc_project`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (116 samples, 0.10%)</title><rect x="94.7654%" y="165" width="0.0964%" height="15" fill="rgb(245,192,40)" fg:x="114034" fg:w="116"/><text x="95.0154%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (32 samples, 0.03%)</title><rect x="94.8676%" y="165" width="0.0266%" height="15" fill="rgb(238,167,29)" fg:x="114157" fg:w="32"/><text x="95.1176%" y="175.50"></text></g><g><title>hpsc_project`hpsc_project::linkedcell::LinkedCell&lt;T,_,_,_&gt;::redistribute_particles (19,567 samples, 16.26%)</title><rect x="78.6368%" y="181" width="16.2607%" height="15" fill="rgb(232,182,51)" fg:x="94626" fg:w="19567"/><text x="78.8868%" y="191.50">hpsc_project`hpsc_project..</text></g><g><title>hpsc_project`core::fmt::Formatter::write_formatted_parts (28 samples, 0.02%)</title><rect x="95.0346%" y="165" width="0.0233%" height="15" fill="rgb(231,60,39)" fg:x="114358" fg:w="28"/><text x="95.2846%" y="175.50"></text></g><g><title>hpsc_project`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (42 samples, 0.03%)</title><rect x="95.1501%" y="149" width="0.0349%" height="15" fill="rgb(208,69,12)" fg:x="114497" fg:w="42"/><text x="95.4001%" y="159.50"></text></g><g><title>hpsc_project`DYLD-STUB$$realloc (20 samples, 0.02%)</title><rect x="95.4061%" y="101" width="0.0166%" height="15" fill="rgb(235,93,37)" fg:x="114805" fg:w="20"/><text x="95.6561%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (13 samples, 0.01%)</title><rect x="95.4701%" y="85" width="0.0108%" height="15" fill="rgb(213,116,39)" fg:x="114882" fg:w="13"/><text x="95.7201%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (29 samples, 0.02%)</title><rect x="95.6388%" y="53" width="0.0241%" height="15" fill="rgb(222,207,29)" fg:x="115085" fg:w="29"/><text x="95.8888%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (67 samples, 0.06%)</title><rect x="95.6629%" y="53" width="0.0557%" height="15" fill="rgb(206,96,30)" fg:x="115114" fg:w="67"/><text x="95.9129%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (103 samples, 0.09%)</title><rect x="95.7360%" y="37" width="0.0856%" height="15" fill="rgb(218,138,4)" fg:x="115202" fg:w="103"/><text x="95.9860%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (202 samples, 0.17%)</title><rect x="95.7185%" y="53" width="0.1679%" height="15" fill="rgb(250,191,14)" fg:x="115181" fg:w="202"/><text x="95.9685%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (78 samples, 0.06%)</title><rect x="95.8216%" y="37" width="0.0648%" height="15" fill="rgb(239,60,40)" fg:x="115305" fg:w="78"/><text x="96.0716%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (425 samples, 0.35%)</title><rect x="95.5540%" y="69" width="0.3532%" height="15" fill="rgb(206,27,48)" fg:x="114983" fg:w="425"/><text x="95.8040%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.02%)</title><rect x="95.8864%" y="53" width="0.0208%" height="15" fill="rgb(225,35,8)" fg:x="115383" fg:w="25"/><text x="96.1364%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (528 samples, 0.44%)</title><rect x="95.4809%" y="85" width="0.4388%" height="15" fill="rgb(250,213,24)" fg:x="114895" fg:w="528"/><text x="95.7309%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (15 samples, 0.01%)</title><rect x="95.9072%" y="69" width="0.0125%" height="15" fill="rgb(247,123,22)" fg:x="115408" fg:w="15"/><text x="96.1572%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (105 samples, 0.09%)</title><rect x="95.9197%" y="85" width="0.0873%" height="15" fill="rgb(231,138,38)" fg:x="115423" fg:w="105"/><text x="96.1697%" y="95.50"></text></g><g><title>hpsc_project`alloc::raw_vec::finish_grow (737 samples, 0.61%)</title><rect x="95.4335%" y="101" width="0.6125%" height="15" fill="rgb(231,145,46)" fg:x="114838" fg:w="737"/><text x="95.6835%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (47 samples, 0.04%)</title><rect x="96.0069%" y="85" width="0.0391%" height="15" fill="rgb(251,118,11)" fg:x="115528" fg:w="47"/><text x="96.2569%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (64 samples, 0.05%)</title><rect x="96.0460%" y="101" width="0.0532%" height="15" fill="rgb(217,147,25)" fg:x="115575" fg:w="64"/><text x="96.2960%" y="111.50"></text></g><g><title>hpsc_project`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (964 samples, 0.80%)</title><rect x="95.3163%" y="117" width="0.8011%" height="15" fill="rgb(247,81,37)" fg:x="114697" fg:w="964"/><text x="95.5663%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (22 samples, 0.02%)</title><rect x="96.0992%" y="101" width="0.0183%" height="15" fill="rgb(209,12,38)" fg:x="115639" fg:w="22"/><text x="96.3492%" y="111.50"></text></g><g><title>hpsc_project`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1,023 samples, 0.85%)</title><rect x="95.2739%" y="133" width="0.8501%" height="15" fill="rgb(227,1,9)" fg:x="114646" fg:w="1023"/><text x="95.5239%" y="143.50"></text></g><g><title>hpsc_project`DYLD-STUB$$memcpy (22 samples, 0.02%)</title><rect x="96.1241%" y="133" width="0.0183%" height="15" fill="rgb(248,47,43)" fg:x="115669" fg:w="22"/><text x="96.3741%" y="143.50"></text></g><g><title>hpsc_project`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (21 samples, 0.02%)</title><rect x="96.1424%" y="133" width="0.0175%" height="15" fill="rgb(221,10,30)" fg:x="115691" fg:w="21"/><text x="96.3924%" y="143.50"></text></g><g><title>hpsc_project`core::fmt::Formatter::write_formatted_parts (1,357 samples, 1.13%)</title><rect x="95.1950%" y="149" width="1.1277%" height="15" fill="rgb(210,229,1)" fg:x="114551" fg:w="1357"/><text x="95.4450%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (196 samples, 0.16%)</title><rect x="96.1598%" y="133" width="0.1629%" height="15" fill="rgb(222,148,37)" fg:x="115712" fg:w="196"/><text x="96.4098%" y="143.50"></text></g><g><title>hpsc_project`core::num::flt2dec::digits_to_dec_str (43 samples, 0.04%)</title><rect x="96.3244%" y="149" width="0.0357%" height="15" fill="rgb(234,67,33)" fg:x="115910" fg:w="43"/><text x="96.5744%" y="159.50"></text></g><g><title>hpsc_project`core::num::flt2dec::strategy::dragon::format_shortest (75 samples, 0.06%)</title><rect x="96.3601%" y="149" width="0.0623%" height="15" fill="rgb(247,98,35)" fg:x="115953" fg:w="75"/><text x="96.6101%" y="159.50"></text></g><g><title>hpsc_project`core::fmt::float::float_to_decimal_common_shortest (3,132 samples, 2.60%)</title><rect x="95.0629%" y="165" width="2.6028%" height="15" fill="rgb(247,138,52)" fg:x="114392" fg:w="3132"/><text x="95.3129%" y="175.50">hp..</text></g><g><title>hpsc_project`core::num::flt2dec::strategy::grisu::format_shortest_opt (1,496 samples, 1.24%)</title><rect x="96.4224%" y="149" width="1.2432%" height="15" fill="rgb(213,79,30)" fg:x="116028" fg:w="1496"/><text x="96.6724%" y="159.50"></text></g><g><title>hpsc_project`csv_core::writer::Writer::field (183 samples, 0.15%)</title><rect x="97.7512%" y="149" width="0.1521%" height="15" fill="rgb(246,177,23)" fg:x="117627" fg:w="183"/><text x="98.0012%" y="159.50"></text></g><g><title>hpsc_project`std::io::Write::write_all (235 samples, 0.20%)</title><rect x="97.9033%" y="149" width="0.1953%" height="15" fill="rgb(230,62,27)" fg:x="117810" fg:w="235"/><text x="98.1533%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (235 samples, 0.20%)</title><rect x="97.9033%" y="133" width="0.1953%" height="15" fill="rgb(216,154,8)" fg:x="117810" fg:w="235"/><text x="98.1533%" y="143.50"></text></g><g><title>hpsc_project`csv::writer::Writer&lt;W&gt;::write_record (550 samples, 0.46%)</title><rect x="97.6823%" y="165" width="0.4571%" height="15" fill="rgb(244,35,45)" fg:x="117544" fg:w="550"/><text x="97.9323%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (49 samples, 0.04%)</title><rect x="98.0986%" y="149" width="0.0407%" height="15" fill="rgb(251,115,12)" fg:x="118045" fg:w="49"/><text x="98.3486%" y="159.50"></text></g><g><title>hpsc_project`csv::writer::Writer&lt;W&gt;::write_terminator (18 samples, 0.01%)</title><rect x="98.1393%" y="165" width="0.0150%" height="15" fill="rgb(240,54,50)" fg:x="118094" fg:w="18"/><text x="98.3893%" y="175.50"></text></g><g><title>hpsc_project`csv::writer::WriterBuilder::from_path (28 samples, 0.02%)</title><rect x="98.1543%" y="165" width="0.0233%" height="15" fill="rgb(233,84,52)" fg:x="118112" fg:w="28"/><text x="98.4043%" y="175.50"></text></g><g><title>hpsc_project`std::fs::OpenOptions::_open (28 samples, 0.02%)</title><rect x="98.1543%" y="149" width="0.0233%" height="15" fill="rgb(207,117,47)" fg:x="118112" fg:w="28"/><text x="98.4043%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__open (28 samples, 0.02%)</title><rect x="98.1543%" y="133" width="0.0233%" height="15" fill="rgb(249,43,39)" fg:x="118112" fg:w="28"/><text x="98.4043%" y="143.50"></text></g><g><title>hpsc_project`csv_core::writer::Writer::field (24 samples, 0.02%)</title><rect x="98.1776%" y="165" width="0.0199%" height="15" fill="rgb(209,38,44)" fg:x="118140" fg:w="24"/><text x="98.4276%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (135 samples, 0.11%)</title><rect x="98.2033%" y="165" width="0.1122%" height="15" fill="rgb(236,212,23)" fg:x="118171" fg:w="135"/><text x="98.4533%" y="175.50"></text></g><g><title>hpsc_project`hpsc_project::linkedcell::LinkedCell&lt;T,_,_,_&gt;::save_to_csv (4,145 samples, 3.44%)</title><rect x="94.8975%" y="181" width="3.4446%" height="15" fill="rgb(242,79,21)" fg:x="114193" fg:w="4145"/><text x="95.1475%" y="191.50">hps..</text></g><g><title>libsystem_platform.dylib`_platform_memset (24 samples, 0.02%)</title><rect x="98.3222%" y="165" width="0.0199%" height="15" fill="rgb(211,96,35)" fg:x="118314" fg:w="24"/><text x="98.5722%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`close (39 samples, 0.03%)</title><rect x="98.3479%" y="181" width="0.0324%" height="15" fill="rgb(253,215,40)" fg:x="118345" fg:w="39"/><text x="98.5979%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (737 samples, 0.61%)</title><rect x="98.3803%" y="181" width="0.6125%" height="15" fill="rgb(211,81,21)" fg:x="118384" fg:w="737"/><text x="98.6303%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (809 samples, 0.67%)</title><rect x="98.9928%" y="181" width="0.6723%" height="15" fill="rgb(208,190,38)" fg:x="119121" fg:w="809"/><text x="99.2428%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (235 samples, 0.20%)</title><rect x="99.6651%" y="181" width="0.1953%" height="15" fill="rgb(235,213,38)" fg:x="119930" fg:w="235"/><text x="99.9151%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`calloc (55 samples, 0.05%)</title><rect x="99.8604%" y="181" width="0.0457%" height="15" fill="rgb(237,122,38)" fg:x="120165" fg:w="55"/><text x="100.1104%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (58 samples, 0.05%)</title><rect x="99.9086%" y="181" width="0.0482%" height="15" fill="rgb(244,218,35)" fg:x="120223" fg:w="58"/><text x="100.1586%" y="191.50"></text></g><g><title>hpsc_project`hpsc_project::main (120,322 samples, 99.99%)</title><rect x="0.0025%" y="197" width="99.9909%" height="15" fill="rgb(240,68,47)" fg:x="3" fg:w="120322"/><text x="0.2525%" y="207.50">hpsc_project`hpsc_project::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.03%)</title><rect x="99.9593%" y="181" width="0.0341%" height="15" fill="rgb(210,16,53)" fg:x="120284" fg:w="41"/><text x="100.2093%" y="191.50"></text></g><g><title>dyld`start (120,326 samples, 99.99%)</title><rect x="0.0000%" y="277" width="99.9942%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="120326"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>hpsc_project`main (120,326 samples, 99.99%)</title><rect x="0.0000%" y="261" width="99.9942%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="120326"/><text x="0.2500%" y="271.50">hpsc_project`main</text></g><g><title>hpsc_project`std::rt::lang_start_internal (120,326 samples, 99.99%)</title><rect x="0.0000%" y="245" width="99.9942%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="120326"/><text x="0.2500%" y="255.50">hpsc_project`std::rt::lang_start_internal</text></g><g><title>hpsc_project`std::rt::lang_start::_{{closure}} (120,326 samples, 99.99%)</title><rect x="0.0000%" y="229" width="99.9942%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="120326"/><text x="0.2500%" y="239.50">hpsc_project`std::rt::lang_start::_{{closure}}</text></g><g><title>hpsc_project`std::sys::backtrace::__rust_begin_short_backtrace (120,326 samples, 99.99%)</title><rect x="0.0000%" y="213" width="99.9942%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="120326"/><text x="0.2500%" y="223.50">hpsc_project`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (120,333 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="120333"/><text x="0.2500%" y="303.50"></text></g></svg></svg>