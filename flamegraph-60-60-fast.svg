<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="560853"><g><title>hpsc_project`DYLD-STUB$$calloc (656 samples, 0.12%)</title><rect x="0.0084%" y="181" width="0.1170%" height="15" fill="rgb(227,0,7)" fg:x="47" fg:w="656"/><text x="0.2584%" y="191.50"></text></g><g><title>hpsc_project`DYLD-STUB$$free (574 samples, 0.10%)</title><rect x="0.1253%" y="181" width="0.1023%" height="15" fill="rgb(217,0,24)" fg:x="703" fg:w="574"/><text x="0.3753%" y="191.50"></text></g><g><title>hpsc_project`__rdl_alloc_zeroed (488 samples, 0.09%)</title><rect x="0.2357%" y="181" width="0.0870%" height="15" fill="rgb(221,193,54)" fg:x="1322" fg:w="488"/><text x="0.4857%" y="191.50"></text></g><g><title>hpsc_project`__rust_alloc_zeroed (70 samples, 0.01%)</title><rect x="0.3243%" y="181" width="0.0125%" height="15" fill="rgb(248,212,6)" fg:x="1819" fg:w="70"/><text x="0.5743%" y="191.50"></text></g><g><title>hpsc_project`hpsc_project::force::apply_lj_force_arrays (155,944 samples, 27.80%)</title><rect x="0.3593%" y="181" width="27.8048%" height="15" fill="rgb(208,68,35)" fg:x="2015" fg:w="155944"/><text x="0.6093%" y="191.50">hpsc_project`hpsc_project::force::apply_lj_fo..</text></g><g><title>hpsc_project`hpsc_project::force::apply_lj_force_linked_cell (54,003 samples, 9.63%)</title><rect x="28.1641%" y="181" width="9.6287%" height="15" fill="rgb(232,128,0)" fg:x="157959" fg:w="54003"/><text x="28.4141%" y="191.50">hpsc_project`h..</text></g><g><title>hpsc_project`hpsc_project::force::apply_lj_force_soa_dyn (9,560 samples, 1.70%)</title><rect x="36.0882%" y="165" width="1.7045%" height="15" fill="rgb(207,160,47)" fg:x="202402" fg:w="9560"/><text x="36.3382%" y="175.50"></text></g><g><title>hpsc_project`hpsc_project::integrator::VelocitySt$uf6$rmerVerlet$LT$T$GT$::update_position_linked (26,283 samples, 4.69%)</title><rect x="37.7931%" y="181" width="4.6863%" height="15" fill="rgb(228,23,34)" fg:x="211964" fg:w="26283"/><text x="38.0431%" y="191.50">hpsc_..</text></g><g><title>hpsc_project`hpsc_project::integrator::VelocitySt$uf6$rmerVerlet$LT$T$GT$::update_velocity_linked (26,273 samples, 4.68%)</title><rect x="42.4794%" y="181" width="4.6845%" height="15" fill="rgb(218,30,26)" fg:x="238247" fg:w="26273"/><text x="42.7294%" y="191.50">hpsc_..</text></g><g><title>hpsc_project`hpsc_project::linkedcell::LinkedCell&lt;T,_,_,_&gt;::apply_boundaries (44,755 samples, 7.98%)</title><rect x="47.1674%" y="181" width="7.9798%" height="15" fill="rgb(220,122,19)" fg:x="264540" fg:w="44755"/><text x="47.4174%" y="191.50">hpsc_projec..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1,115 samples, 0.20%)</title><rect x="57.2628%" y="165" width="0.1988%" height="15" fill="rgb(250,228,42)" fg:x="321160" fg:w="1115"/><text x="57.5128%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6,593 samples, 1.18%)</title><rect x="57.4616%" y="165" width="1.1755%" height="15" fill="rgb(240,193,28)" fg:x="322275" fg:w="6593"/><text x="57.7116%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1,474 samples, 0.26%)</title><rect x="59.6713%" y="149" width="0.2628%" height="15" fill="rgb(216,20,37)" fg:x="334668" fg:w="1474"/><text x="59.9213%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1,292 samples, 0.23%)</title><rect x="59.7037%" y="133" width="0.2304%" height="15" fill="rgb(206,188,39)" fg:x="334850" fg:w="1292"/><text x="59.9537%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (7,271 samples, 1.30%)</title><rect x="58.6380%" y="165" width="1.2964%" height="15" fill="rgb(217,207,13)" fg:x="328873" fg:w="7271"/><text x="58.8880%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (374 samples, 0.07%)</title><rect x="59.9348%" y="133" width="0.0667%" height="15" fill="rgb(231,73,38)" fg:x="336146" fg:w="374"/><text x="60.1848%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (376 samples, 0.07%)</title><rect x="59.9348%" y="149" width="0.0670%" height="15" fill="rgb(225,20,46)" fg:x="336146" fg:w="376"/><text x="60.1848%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (379 samples, 0.07%)</title><rect x="59.9344%" y="165" width="0.0676%" height="15" fill="rgb(210,31,41)" fg:x="336144" fg:w="379"/><text x="60.1844%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (99 samples, 0.02%)</title><rect x="60.0020%" y="165" width="0.0177%" height="15" fill="rgb(221,200,47)" fg:x="336523" fg:w="99"/><text x="60.2520%" y="175.50"></text></g><g><title>hpsc_project`hpsc_project::linkedcell::LinkedCell&lt;T,_,_,_&gt;::flush_forces (28,592 samples, 5.10%)</title><rect x="55.1472%" y="181" width="5.0979%" height="15" fill="rgb(226,26,5)" fg:x="309295" fg:w="28592"/><text x="55.3972%" y="191.50">hpsc_p..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1,265 samples, 0.23%)</title><rect x="60.0196%" y="165" width="0.2255%" height="15" fill="rgb(249,33,26)" fg:x="336622" fg:w="1265"/><text x="60.2696%" y="175.50"></text></g><g><title>hpsc_project`alloc::raw_vec::finish_grow (94 samples, 0.02%)</title><rect x="96.2735%" y="149" width="0.0168%" height="15" fill="rgb(235,183,28)" fg:x="539953" fg:w="94"/><text x="96.5235%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (61 samples, 0.01%)</title><rect x="96.2794%" y="133" width="0.0109%" height="15" fill="rgb(221,5,38)" fg:x="539986" fg:w="61"/><text x="96.5294%" y="143.50"></text></g><g><title>hpsc_project`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (186 samples, 0.03%)</title><rect x="96.2662%" y="165" width="0.0332%" height="15" fill="rgb(247,18,42)" fg:x="539912" fg:w="186"/><text x="96.5162%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (167 samples, 0.03%)</title><rect x="96.3194%" y="85" width="0.0298%" height="15" fill="rgb(241,131,45)" fg:x="540210" fg:w="167"/><text x="96.5694%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (61 samples, 0.01%)</title><rect x="96.3383%" y="69" width="0.0109%" height="15" fill="rgb(249,31,29)" fg:x="540316" fg:w="61"/><text x="96.5883%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (195 samples, 0.03%)</title><rect x="96.3145%" y="101" width="0.0348%" height="15" fill="rgb(225,111,53)" fg:x="540183" fg:w="195"/><text x="96.5645%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (252 samples, 0.04%)</title><rect x="96.3083%" y="117" width="0.0449%" height="15" fill="rgb(238,160,17)" fg:x="540148" fg:w="252"/><text x="96.5583%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (282 samples, 0.05%)</title><rect x="96.3042%" y="133" width="0.0503%" height="15" fill="rgb(214,148,48)" fg:x="540125" fg:w="282"/><text x="96.5542%" y="143.50"></text></g><g><title>hpsc_project`alloc::raw_vec::finish_grow (377 samples, 0.07%)</title><rect x="96.3026%" y="149" width="0.0672%" height="15" fill="rgb(232,36,49)" fg:x="540116" fg:w="377"/><text x="96.5526%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (82 samples, 0.01%)</title><rect x="96.3552%" y="133" width="0.0146%" height="15" fill="rgb(209,103,24)" fg:x="540411" fg:w="82"/><text x="96.6052%" y="143.50"></text></g><g><title>hpsc_project`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (406 samples, 0.07%)</title><rect x="96.2994%" y="165" width="0.0724%" height="15" fill="rgb(229,88,8)" fg:x="540098" fg:w="406"/><text x="96.5494%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (120 samples, 0.02%)</title><rect x="96.3748%" y="165" width="0.0214%" height="15" fill="rgb(213,181,19)" fg:x="540521" fg:w="120"/><text x="96.6248%" y="175.50"></text></g><g><title>hpsc_project`hpsc_project::linkedcell::LinkedCell&lt;T,_,_,_&gt;::redistribute_particles (202,786 samples, 36.16%)</title><rect x="60.2452%" y="181" width="36.1567%" height="15" fill="rgb(254,191,54)" fg:x="337887" fg:w="202786"/><text x="60.4952%" y="191.50">hpsc_project`hpsc_project::linkedcell::LinkedCell&lt;T,_,_,_&gt;:..</text></g><g><title>hpsc_project`core::fmt::Formatter::write_formatted_parts (103 samples, 0.02%)</title><rect x="96.5185%" y="165" width="0.0184%" height="15" fill="rgb(241,83,37)" fg:x="541327" fg:w="103"/><text x="96.7685%" y="175.50"></text></g><g><title>hpsc_project`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (119 samples, 0.02%)</title><rect x="96.6041%" y="149" width="0.0212%" height="15" fill="rgb(233,36,39)" fg:x="541807" fg:w="119"/><text x="96.8541%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (103 samples, 0.02%)</title><rect x="96.9384%" y="53" width="0.0184%" height="15" fill="rgb(226,3,54)" fg:x="543682" fg:w="103"/><text x="97.1884%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (205 samples, 0.04%)</title><rect x="96.9571%" y="53" width="0.0366%" height="15" fill="rgb(245,192,40)" fg:x="543787" fg:w="205"/><text x="97.2071%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (384 samples, 0.07%)</title><rect x="97.0080%" y="37" width="0.0685%" height="15" fill="rgb(238,167,29)" fg:x="544072" fg:w="384"/><text x="97.2580%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (696 samples, 0.12%)</title><rect x="96.9937%" y="53" width="0.1241%" height="15" fill="rgb(232,182,51)" fg:x="543992" fg:w="696"/><text x="97.2437%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (232 samples, 0.04%)</title><rect x="97.0764%" y="37" width="0.0414%" height="15" fill="rgb(231,60,39)" fg:x="544456" fg:w="232"/><text x="97.3264%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1,397 samples, 0.25%)</title><rect x="96.8856%" y="69" width="0.2491%" height="15" fill="rgb(208,69,12)" fg:x="543386" fg:w="1397"/><text x="97.1356%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (95 samples, 0.02%)</title><rect x="97.1178%" y="53" width="0.0169%" height="15" fill="rgb(235,93,37)" fg:x="544688" fg:w="95"/><text x="97.3678%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1,727 samples, 0.31%)</title><rect x="96.8400%" y="85" width="0.3079%" height="15" fill="rgb(213,116,39)" fg:x="543130" fg:w="1727"/><text x="97.0900%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (73 samples, 0.01%)</title><rect x="97.1349%" y="69" width="0.0130%" height="15" fill="rgb(222,207,29)" fg:x="544784" fg:w="73"/><text x="97.3849%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (298 samples, 0.05%)</title><rect x="97.1479%" y="85" width="0.0531%" height="15" fill="rgb(206,96,30)" fg:x="544857" fg:w="298"/><text x="97.3979%" y="95.50"></text></g><g><title>hpsc_project`alloc::raw_vec::finish_grow (2,385 samples, 0.43%)</title><rect x="96.8116%" y="101" width="0.4252%" height="15" fill="rgb(218,138,4)" fg:x="542971" fg:w="2385"/><text x="97.0616%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (201 samples, 0.04%)</title><rect x="97.2010%" y="85" width="0.0358%" height="15" fill="rgb(250,191,14)" fg:x="545155" fg:w="201"/><text x="97.4510%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (218 samples, 0.04%)</title><rect x="97.2369%" y="101" width="0.0389%" height="15" fill="rgb(239,60,40)" fg:x="545356" fg:w="218"/><text x="97.4869%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (81 samples, 0.01%)</title><rect x="97.2758%" y="101" width="0.0144%" height="15" fill="rgb(206,27,48)" fg:x="545574" fg:w="81"/><text x="97.5258%" y="111.50"></text></g><g><title>hpsc_project`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,154 samples, 0.56%)</title><rect x="96.7280%" y="117" width="0.5624%" height="15" fill="rgb(225,35,8)" fg:x="542502" fg:w="3154"/><text x="96.9780%" y="127.50"></text></g><g><title>hpsc_project`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3,374 samples, 0.60%)</title><rect x="96.6943%" y="133" width="0.6016%" height="15" fill="rgb(250,213,24)" fg:x="542313" fg:w="3374"/><text x="96.9443%" y="143.50"></text></g><g><title>hpsc_project`DYLD-STUB$$memcpy (76 samples, 0.01%)</title><rect x="97.2959%" y="133" width="0.0136%" height="15" fill="rgb(247,123,22)" fg:x="545687" fg:w="76"/><text x="97.5459%" y="143.50"></text></g><g><title>hpsc_project`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (60 samples, 0.01%)</title><rect x="97.3095%" y="133" width="0.0107%" height="15" fill="rgb(231,138,38)" fg:x="545763" fg:w="60"/><text x="97.5595%" y="143.50"></text></g><g><title>hpsc_project`core::fmt::Formatter::write_formatted_parts (4,543 samples, 0.81%)</title><rect x="96.6305%" y="149" width="0.8100%" height="15" fill="rgb(231,145,46)" fg:x="541955" fg:w="4543"/><text x="96.8805%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (675 samples, 0.12%)</title><rect x="97.3202%" y="133" width="0.1204%" height="15" fill="rgb(251,118,11)" fg:x="545823" fg:w="675"/><text x="97.5702%" y="143.50"></text></g><g><title>hpsc_project`core::num::flt2dec::digits_to_dec_str (130 samples, 0.02%)</title><rect x="97.4410%" y="149" width="0.0232%" height="15" fill="rgb(217,147,25)" fg:x="546501" fg:w="130"/><text x="97.6910%" y="159.50"></text></g><g><title>hpsc_project`core::num::flt2dec::strategy::dragon::format_shortest (242 samples, 0.04%)</title><rect x="97.4642%" y="149" width="0.0431%" height="15" fill="rgb(247,81,37)" fg:x="546631" fg:w="242"/><text x="97.7142%" y="159.50"></text></g><g><title>hpsc_project`core::fmt::float::float_to_decimal_common_shortest (10,511 samples, 1.87%)</title><rect x="96.5421%" y="165" width="1.8741%" height="15" fill="rgb(209,12,38)" fg:x="541459" fg:w="10511"/><text x="96.7921%" y="175.50">h..</text></g><g><title>hpsc_project`core::num::flt2dec::strategy::grisu::format_shortest_opt (5,096 samples, 0.91%)</title><rect x="97.5075%" y="149" width="0.9086%" height="15" fill="rgb(227,1,9)" fg:x="546874" fg:w="5096"/><text x="97.7575%" y="159.50"></text></g><g><title>hpsc_project`core::num::flt2dec::strategy::grisu::format_shortest_opt (75 samples, 0.01%)</title><rect x="98.4165%" y="165" width="0.0134%" height="15" fill="rgb(248,47,43)" fg:x="551972" fg:w="75"/><text x="98.6665%" y="175.50"></text></g><g><title>hpsc_project`csv::writer::Writer&lt;W&gt;::write_delimiter (61 samples, 0.01%)</title><rect x="98.4704%" y="149" width="0.0109%" height="15" fill="rgb(221,10,30)" fg:x="552274" fg:w="61"/><text x="98.7204%" y="159.50"></text></g><g><title>hpsc_project`csv_core::writer::Writer::field (597 samples, 0.11%)</title><rect x="98.4909%" y="149" width="0.1064%" height="15" fill="rgb(210,229,1)" fg:x="552389" fg:w="597"/><text x="98.7409%" y="159.50"></text></g><g><title>hpsc_project`std::io::Write::write_all (859 samples, 0.15%)</title><rect x="98.5973%" y="149" width="0.1532%" height="15" fill="rgb(222,148,37)" fg:x="552986" fg:w="859"/><text x="98.8473%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`write (859 samples, 0.15%)</title><rect x="98.5973%" y="133" width="0.1532%" height="15" fill="rgb(234,67,33)" fg:x="552986" fg:w="859"/><text x="98.8473%" y="143.50"></text></g><g><title>hpsc_project`csv::writer::Writer&lt;W&gt;::write_record (1,904 samples, 0.34%)</title><rect x="98.4336%" y="165" width="0.3395%" height="15" fill="rgb(247,98,35)" fg:x="552068" fg:w="1904"/><text x="98.6836%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (127 samples, 0.02%)</title><rect x="98.7505%" y="149" width="0.0226%" height="15" fill="rgb(247,138,52)" fg:x="553845" fg:w="127"/><text x="99.0005%" y="159.50"></text></g><g><title>hpsc_project`csv::writer::Writer&lt;W&gt;::write_terminator (70 samples, 0.01%)</title><rect x="98.7731%" y="165" width="0.0125%" height="15" fill="rgb(213,79,30)" fg:x="553972" fg:w="70"/><text x="99.0231%" y="175.50"></text></g><g><title>hpsc_project`csv_core::writer::Writer::field (65 samples, 0.01%)</title><rect x="98.7913%" y="165" width="0.0116%" height="15" fill="rgb(246,177,23)" fg:x="554074" fg:w="65"/><text x="99.0413%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (434 samples, 0.08%)</title><rect x="98.8079%" y="165" width="0.0774%" height="15" fill="rgb(230,62,27)" fg:x="554167" fg:w="434"/><text x="99.0579%" y="175.50"></text></g><g><title>hpsc_project`hpsc_project::linkedcell::LinkedCell&lt;T,_,_,_&gt;::save_to_csv (14,007 samples, 2.50%)</title><rect x="96.4019%" y="181" width="2.4974%" height="15" fill="rgb(216,154,8)" fg:x="540673" fg:w="14007"/><text x="96.6519%" y="191.50">hp..</text></g><g><title>libsystem_platform.dylib`_platform_memset (67 samples, 0.01%)</title><rect x="98.8874%" y="165" width="0.0119%" height="15" fill="rgb(244,35,45)" fg:x="554613" fg:w="67"/><text x="99.1374%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`close (77 samples, 0.01%)</title><rect x="98.9006%" y="181" width="0.0137%" height="15" fill="rgb(251,115,12)" fg:x="554687" fg:w="77"/><text x="99.1506%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (2,303 samples, 0.41%)</title><rect x="98.9143%" y="181" width="0.4106%" height="15" fill="rgb(240,54,50)" fg:x="554764" fg:w="2303"/><text x="99.1643%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2,294 samples, 0.41%)</title><rect x="99.3250%" y="181" width="0.4090%" height="15" fill="rgb(233,84,52)" fg:x="557067" fg:w="2294"/><text x="99.5750%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (688 samples, 0.12%)</title><rect x="99.7340%" y="181" width="0.1227%" height="15" fill="rgb(207,117,47)" fg:x="559361" fg:w="688"/><text x="99.9840%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`calloc (385 samples, 0.07%)</title><rect x="99.8566%" y="181" width="0.0686%" height="15" fill="rgb(249,43,39)" fg:x="560049" fg:w="385"/><text x="100.1066%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc_type (284 samples, 0.05%)</title><rect x="99.9258%" y="181" width="0.0506%" height="15" fill="rgb(209,38,44)" fg:x="560437" fg:w="284"/><text x="100.1758%" y="191.50"></text></g><g><title>hpsc_project`main (560,844 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9984%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="560844"/><text x="0.2500%" y="271.50">hpsc_project`main</text></g><g><title>hpsc_project`std::rt::lang_start_internal (560,844 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9984%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="560844"/><text x="0.2500%" y="255.50">hpsc_project`std::rt::lang_start_internal</text></g><g><title>hpsc_project`std::rt::lang_start::_{{closure}} (560,844 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9984%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="560844"/><text x="0.2500%" y="239.50">hpsc_project`std::rt::lang_start::_{{closure}}</text></g><g><title>hpsc_project`std::sys::backtrace::__rust_begin_short_backtrace (560,844 samples, 100.00%)</title><rect x="0.0000%" y="213" width="99.9984%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="560844"/><text x="0.2500%" y="223.50">hpsc_project`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>hpsc_project`hpsc_project::main (560,842 samples, 100.00%)</title><rect x="0.0004%" y="197" width="99.9980%" height="15" fill="rgb(211,81,21)" fg:x="2" fg:w="560842"/><text x="0.2504%" y="207.50">hpsc_project`hpsc_project::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove (123 samples, 0.02%)</title><rect x="99.9765%" y="181" width="0.0219%" height="15" fill="rgb(208,190,38)" fg:x="560721" fg:w="123"/><text x="100.2265%" y="191.50"></text></g><g><title>dyld`start (560,845 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9986%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="560845"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>all (560,853 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="560853"/><text x="0.2500%" y="303.50"></text></g></svg></svg>